/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.bioformats.imagedataset;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ImageDataset implements org.apache.thrift.TBase<ImageDataset, ImageDataset._Fields>, java.io.Serializable, Cloneable, Comparable<ImageDataset> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageDataset");

  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGE_TIME_STAMPS_FIELD_DESC = new org.apache.thrift.protocol.TField("imageTimeStamps", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("numZ", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImageDatasetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImageDatasetTupleSchemeFactory();

  public java.util.List<UShortImage> images; // required
  public java.util.List<java.lang.Double> imageTimeStamps; // required
  public int numZ; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMAGES((short)1, "images"),
    IMAGE_TIME_STAMPS((short)2, "imageTimeStamps"),
    NUM_Z((short)3, "numZ");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMAGES
          return IMAGES;
        case 2: // IMAGE_TIME_STAMPS
          return IMAGE_TIME_STAMPS;
        case 3: // NUM_Z
          return NUM_Z;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMZ_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UShortImage.class))));
    tmpMap.put(_Fields.IMAGE_TIME_STAMPS, new org.apache.thrift.meta_data.FieldMetaData("imageTimeStamps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.NUM_Z, new org.apache.thrift.meta_data.FieldMetaData("numZ", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageDataset.class, metaDataMap);
  }

  public ImageDataset() {
  }

  public ImageDataset(
    java.util.List<UShortImage> images,
    java.util.List<java.lang.Double> imageTimeStamps,
    int numZ)
  {
    this();
    this.images = images;
    this.imageTimeStamps = imageTimeStamps;
    this.numZ = numZ;
    setNumZIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageDataset(ImageDataset other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImages()) {
      java.util.List<UShortImage> __this__images = new java.util.ArrayList<UShortImage>(other.images.size());
      for (UShortImage other_element : other.images) {
        __this__images.add(new UShortImage(other_element));
      }
      this.images = __this__images;
    }
    if (other.isSetImageTimeStamps()) {
      java.util.List<java.lang.Double> __this__imageTimeStamps = new java.util.ArrayList<java.lang.Double>(other.imageTimeStamps);
      this.imageTimeStamps = __this__imageTimeStamps;
    }
    this.numZ = other.numZ;
  }

  public ImageDataset deepCopy() {
    return new ImageDataset(this);
  }

  @Override
  public void clear() {
    this.images = null;
    this.imageTimeStamps = null;
    setNumZIsSet(false);
    this.numZ = 0;
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public java.util.Iterator<UShortImage> getImagesIterator() {
    return (this.images == null) ? null : this.images.iterator();
  }

  public void addToImages(UShortImage elem) {
    if (this.images == null) {
      this.images = new java.util.ArrayList<UShortImage>();
    }
    this.images.add(elem);
  }

  public java.util.List<UShortImage> getImages() {
    return this.images;
  }

  public ImageDataset setImages(java.util.List<UShortImage> images) {
    this.images = images;
    return this;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public int getImageTimeStampsSize() {
    return (this.imageTimeStamps == null) ? 0 : this.imageTimeStamps.size();
  }

  public java.util.Iterator<java.lang.Double> getImageTimeStampsIterator() {
    return (this.imageTimeStamps == null) ? null : this.imageTimeStamps.iterator();
  }

  public void addToImageTimeStamps(double elem) {
    if (this.imageTimeStamps == null) {
      this.imageTimeStamps = new java.util.ArrayList<java.lang.Double>();
    }
    this.imageTimeStamps.add(elem);
  }

  public java.util.List<java.lang.Double> getImageTimeStamps() {
    return this.imageTimeStamps;
  }

  public ImageDataset setImageTimeStamps(java.util.List<java.lang.Double> imageTimeStamps) {
    this.imageTimeStamps = imageTimeStamps;
    return this;
  }

  public void unsetImageTimeStamps() {
    this.imageTimeStamps = null;
  }

  /** Returns true if field imageTimeStamps is set (has been assigned a value) and false otherwise */
  public boolean isSetImageTimeStamps() {
    return this.imageTimeStamps != null;
  }

  public void setImageTimeStampsIsSet(boolean value) {
    if (!value) {
      this.imageTimeStamps = null;
    }
  }

  public int getNumZ() {
    return this.numZ;
  }

  public ImageDataset setNumZ(int numZ) {
    this.numZ = numZ;
    setNumZIsSet(true);
    return this;
  }

  public void unsetNumZ() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMZ_ISSET_ID);
  }

  /** Returns true if field numZ is set (has been assigned a value) and false otherwise */
  public boolean isSetNumZ() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMZ_ISSET_ID);
  }

  public void setNumZIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((java.util.List<UShortImage>)value);
      }
      break;

    case IMAGE_TIME_STAMPS:
      if (value == null) {
        unsetImageTimeStamps();
      } else {
        setImageTimeStamps((java.util.List<java.lang.Double>)value);
      }
      break;

    case NUM_Z:
      if (value == null) {
        unsetNumZ();
      } else {
        setNumZ((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IMAGES:
      return getImages();

    case IMAGE_TIME_STAMPS:
      return getImageTimeStamps();

    case NUM_Z:
      return getNumZ();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IMAGES:
      return isSetImages();
    case IMAGE_TIME_STAMPS:
      return isSetImageTimeStamps();
    case NUM_Z:
      return isSetNumZ();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ImageDataset)
      return this.equals((ImageDataset)that);
    return false;
  }

  public boolean equals(ImageDataset that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_imageTimeStamps = true && this.isSetImageTimeStamps();
    boolean that_present_imageTimeStamps = true && that.isSetImageTimeStamps();
    if (this_present_imageTimeStamps || that_present_imageTimeStamps) {
      if (!(this_present_imageTimeStamps && that_present_imageTimeStamps))
        return false;
      if (!this.imageTimeStamps.equals(that.imageTimeStamps))
        return false;
    }

    boolean this_present_numZ = true;
    boolean that_present_numZ = true;
    if (this_present_numZ || that_present_numZ) {
      if (!(this_present_numZ && that_present_numZ))
        return false;
      if (this.numZ != that.numZ)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetImages()) ? 131071 : 524287);
    if (isSetImages())
      hashCode = hashCode * 8191 + images.hashCode();

    hashCode = hashCode * 8191 + ((isSetImageTimeStamps()) ? 131071 : 524287);
    if (isSetImageTimeStamps())
      hashCode = hashCode * 8191 + imageTimeStamps.hashCode();

    hashCode = hashCode * 8191 + numZ;

    return hashCode;
  }

  @Override
  public int compareTo(ImageDataset other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImageTimeStamps()).compareTo(other.isSetImageTimeStamps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageTimeStamps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageTimeStamps, other.imageTimeStamps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumZ()).compareTo(other.isSetNumZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numZ, other.numZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImageDataset(");
    boolean first = true;

    sb.append("images:");
    if (this.images == null) {
      sb.append("null");
    } else {
      sb.append(this.images);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageTimeStamps:");
    if (this.imageTimeStamps == null) {
      sb.append("null");
    } else {
      sb.append(this.imageTimeStamps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numZ:");
    sb.append(this.numZ);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (images == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'images' was not present! Struct: " + toString());
    }
    if (imageTimeStamps == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'imageTimeStamps' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'numZ' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageDatasetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageDatasetStandardScheme getScheme() {
      return new ImageDatasetStandardScheme();
    }
  }

  private static class ImageDatasetStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImageDataset> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageDataset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.images = new java.util.ArrayList<UShortImage>(_list16.size);
                UShortImage _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new UShortImage();
                  _elem17.read(iprot);
                  struct.images.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGE_TIME_STAMPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.imageTimeStamps = new java.util.ArrayList<java.lang.Double>(_list19.size);
                double _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readDouble();
                  struct.imageTimeStamps.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setImageTimeStampsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numZ = iprot.readI32();
              struct.setNumZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumZ()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numZ' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageDataset struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.images != null) {
        oprot.writeFieldBegin(IMAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.images.size()));
          for (UShortImage _iter22 : struct.images)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.imageTimeStamps != null) {
        oprot.writeFieldBegin(IMAGE_TIME_STAMPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.imageTimeStamps.size()));
          for (double _iter23 : struct.imageTimeStamps)
          {
            oprot.writeDouble(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_Z_FIELD_DESC);
      oprot.writeI32(struct.numZ);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageDatasetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageDatasetTupleScheme getScheme() {
      return new ImageDatasetTupleScheme();
    }
  }

  private static class ImageDatasetTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImageDataset> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageDataset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.images.size());
        for (UShortImage _iter24 : struct.images)
        {
          _iter24.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.imageTimeStamps.size());
        for (double _iter25 : struct.imageTimeStamps)
        {
          oprot.writeDouble(_iter25);
        }
      }
      oprot.writeI32(struct.numZ);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageDataset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.images = new java.util.ArrayList<UShortImage>(_list26.size);
        UShortImage _elem27;
        for (int _i28 = 0; _i28 < _list26.size; ++_i28)
        {
          _elem27 = new UShortImage();
          _elem27.read(iprot);
          struct.images.add(_elem27);
        }
      }
      struct.setImagesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.imageTimeStamps = new java.util.ArrayList<java.lang.Double>(_list29.size);
        double _elem30;
        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
        {
          _elem30 = iprot.readDouble();
          struct.imageTimeStamps.add(_elem30);
        }
      }
      struct.setImageTimeStampsIsSet(true);
      struct.numZ = iprot.readI32();
      struct.setNumZIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

