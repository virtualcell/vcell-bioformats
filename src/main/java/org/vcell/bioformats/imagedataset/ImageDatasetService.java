/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.bioformats.imagedataset;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ImageDatasetService {

  public interface Iface {

    public ImageSizeInfo getImageSizeInfo(java.lang.String fileName) throws ThriftImageException, org.apache.thrift.TException;

    public ImageSizeInfo getImageSizeInfoForceZ(java.lang.String fileName, int forceZSize) throws ThriftImageException, org.apache.thrift.TException;

    public ImageDataset readImageDataset(java.lang.String imageID) throws ThriftImageException, org.apache.thrift.TException;

    public java.util.List<ImageDataset> readImageDatasetChannels(java.lang.String imageID, boolean bMergeChannels, int timeIndex, ISize resize) throws ThriftImageException, org.apache.thrift.TException;

    public ImageDataset readImageDatasetFromMultiFiles(java.util.List<java.lang.String> files, boolean isTimeSeries, double timeInterval) throws ThriftImageException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getImageSizeInfo(java.lang.String fileName, org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> resultHandler) throws org.apache.thrift.TException;

    public void getImageSizeInfoForceZ(java.lang.String fileName, int forceZSize, org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> resultHandler) throws org.apache.thrift.TException;

    public void readImageDataset(java.lang.String imageID, org.apache.thrift.async.AsyncMethodCallback<ImageDataset> resultHandler) throws org.apache.thrift.TException;

    public void readImageDatasetChannels(java.lang.String imageID, boolean bMergeChannels, int timeIndex, ISize resize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ImageDataset>> resultHandler) throws org.apache.thrift.TException;

    public void readImageDatasetFromMultiFiles(java.util.List<java.lang.String> files, boolean isTimeSeries, double timeInterval, org.apache.thrift.async.AsyncMethodCallback<ImageDataset> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ImageSizeInfo getImageSizeInfo(java.lang.String fileName) throws ThriftImageException, org.apache.thrift.TException
    {
      send_getImageSizeInfo(fileName);
      return recv_getImageSizeInfo();
    }

    public void send_getImageSizeInfo(java.lang.String fileName) throws org.apache.thrift.TException
    {
      getImageSizeInfo_args args = new getImageSizeInfo_args();
      args.setFileName(fileName);
      sendBase("getImageSizeInfo", args);
    }

    public ImageSizeInfo recv_getImageSizeInfo() throws ThriftImageException, org.apache.thrift.TException
    {
      getImageSizeInfo_result result = new getImageSizeInfo_result();
      receiveBase(result, "getImageSizeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.imageException != null) {
        throw result.imageException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getImageSizeInfo failed: unknown result");
    }

    public ImageSizeInfo getImageSizeInfoForceZ(java.lang.String fileName, int forceZSize) throws ThriftImageException, org.apache.thrift.TException
    {
      send_getImageSizeInfoForceZ(fileName, forceZSize);
      return recv_getImageSizeInfoForceZ();
    }

    public void send_getImageSizeInfoForceZ(java.lang.String fileName, int forceZSize) throws org.apache.thrift.TException
    {
      getImageSizeInfoForceZ_args args = new getImageSizeInfoForceZ_args();
      args.setFileName(fileName);
      args.setForceZSize(forceZSize);
      sendBase("getImageSizeInfoForceZ", args);
    }

    public ImageSizeInfo recv_getImageSizeInfoForceZ() throws ThriftImageException, org.apache.thrift.TException
    {
      getImageSizeInfoForceZ_result result = new getImageSizeInfoForceZ_result();
      receiveBase(result, "getImageSizeInfoForceZ");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.imageException != null) {
        throw result.imageException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getImageSizeInfoForceZ failed: unknown result");
    }

    public ImageDataset readImageDataset(java.lang.String imageID) throws ThriftImageException, org.apache.thrift.TException
    {
      send_readImageDataset(imageID);
      return recv_readImageDataset();
    }

    public void send_readImageDataset(java.lang.String imageID) throws org.apache.thrift.TException
    {
      readImageDataset_args args = new readImageDataset_args();
      args.setImageID(imageID);
      sendBase("readImageDataset", args);
    }

    public ImageDataset recv_readImageDataset() throws ThriftImageException, org.apache.thrift.TException
    {
      readImageDataset_result result = new readImageDataset_result();
      receiveBase(result, "readImageDataset");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.imageException != null) {
        throw result.imageException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readImageDataset failed: unknown result");
    }

    public java.util.List<ImageDataset> readImageDatasetChannels(java.lang.String imageID, boolean bMergeChannels, int timeIndex, ISize resize) throws ThriftImageException, org.apache.thrift.TException
    {
      send_readImageDatasetChannels(imageID, bMergeChannels, timeIndex, resize);
      return recv_readImageDatasetChannels();
    }

    public void send_readImageDatasetChannels(java.lang.String imageID, boolean bMergeChannels, int timeIndex, ISize resize) throws org.apache.thrift.TException
    {
      readImageDatasetChannels_args args = new readImageDatasetChannels_args();
      args.setImageID(imageID);
      args.setBMergeChannels(bMergeChannels);
      args.setTimeIndex(timeIndex);
      args.setResize(resize);
      sendBase("readImageDatasetChannels", args);
    }

    public java.util.List<ImageDataset> recv_readImageDatasetChannels() throws ThriftImageException, org.apache.thrift.TException
    {
      readImageDatasetChannels_result result = new readImageDatasetChannels_result();
      receiveBase(result, "readImageDatasetChannels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.imageException != null) {
        throw result.imageException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readImageDatasetChannels failed: unknown result");
    }

    public ImageDataset readImageDatasetFromMultiFiles(java.util.List<java.lang.String> files, boolean isTimeSeries, double timeInterval) throws ThriftImageException, org.apache.thrift.TException
    {
      send_readImageDatasetFromMultiFiles(files, isTimeSeries, timeInterval);
      return recv_readImageDatasetFromMultiFiles();
    }

    public void send_readImageDatasetFromMultiFiles(java.util.List<java.lang.String> files, boolean isTimeSeries, double timeInterval) throws org.apache.thrift.TException
    {
      readImageDatasetFromMultiFiles_args args = new readImageDatasetFromMultiFiles_args();
      args.setFiles(files);
      args.setIsTimeSeries(isTimeSeries);
      args.setTimeInterval(timeInterval);
      sendBase("readImageDatasetFromMultiFiles", args);
    }

    public ImageDataset recv_readImageDatasetFromMultiFiles() throws ThriftImageException, org.apache.thrift.TException
    {
      readImageDatasetFromMultiFiles_result result = new readImageDatasetFromMultiFiles_result();
      receiveBase(result, "readImageDatasetFromMultiFiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.imageException != null) {
        throw result.imageException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readImageDatasetFromMultiFiles failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getImageSizeInfo(java.lang.String fileName, org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getImageSizeInfo_call method_call = new getImageSizeInfo_call(fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getImageSizeInfo_call extends org.apache.thrift.async.TAsyncMethodCall<ImageSizeInfo> {
      private java.lang.String fileName;
      public getImageSizeInfo_call(java.lang.String fileName, org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getImageSizeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getImageSizeInfo_args args = new getImageSizeInfo_args();
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ImageSizeInfo getResult() throws ThriftImageException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getImageSizeInfo();
      }
    }

    public void getImageSizeInfoForceZ(java.lang.String fileName, int forceZSize, org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getImageSizeInfoForceZ_call method_call = new getImageSizeInfoForceZ_call(fileName, forceZSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getImageSizeInfoForceZ_call extends org.apache.thrift.async.TAsyncMethodCall<ImageSizeInfo> {
      private java.lang.String fileName;
      private int forceZSize;
      public getImageSizeInfoForceZ_call(java.lang.String fileName, int forceZSize, org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
        this.forceZSize = forceZSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getImageSizeInfoForceZ", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getImageSizeInfoForceZ_args args = new getImageSizeInfoForceZ_args();
        args.setFileName(fileName);
        args.setForceZSize(forceZSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ImageSizeInfo getResult() throws ThriftImageException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getImageSizeInfoForceZ();
      }
    }

    public void readImageDataset(java.lang.String imageID, org.apache.thrift.async.AsyncMethodCallback<ImageDataset> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readImageDataset_call method_call = new readImageDataset_call(imageID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readImageDataset_call extends org.apache.thrift.async.TAsyncMethodCall<ImageDataset> {
      private java.lang.String imageID;
      public readImageDataset_call(java.lang.String imageID, org.apache.thrift.async.AsyncMethodCallback<ImageDataset> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imageID = imageID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readImageDataset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readImageDataset_args args = new readImageDataset_args();
        args.setImageID(imageID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ImageDataset getResult() throws ThriftImageException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readImageDataset();
      }
    }

    public void readImageDatasetChannels(java.lang.String imageID, boolean bMergeChannels, int timeIndex, ISize resize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ImageDataset>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readImageDatasetChannels_call method_call = new readImageDatasetChannels_call(imageID, bMergeChannels, timeIndex, resize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readImageDatasetChannels_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ImageDataset>> {
      private java.lang.String imageID;
      private boolean bMergeChannels;
      private int timeIndex;
      private ISize resize;
      public readImageDatasetChannels_call(java.lang.String imageID, boolean bMergeChannels, int timeIndex, ISize resize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ImageDataset>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imageID = imageID;
        this.bMergeChannels = bMergeChannels;
        this.timeIndex = timeIndex;
        this.resize = resize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readImageDatasetChannels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readImageDatasetChannels_args args = new readImageDatasetChannels_args();
        args.setImageID(imageID);
        args.setBMergeChannels(bMergeChannels);
        args.setTimeIndex(timeIndex);
        args.setResize(resize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<ImageDataset> getResult() throws ThriftImageException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readImageDatasetChannels();
      }
    }

    public void readImageDatasetFromMultiFiles(java.util.List<java.lang.String> files, boolean isTimeSeries, double timeInterval, org.apache.thrift.async.AsyncMethodCallback<ImageDataset> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readImageDatasetFromMultiFiles_call method_call = new readImageDatasetFromMultiFiles_call(files, isTimeSeries, timeInterval, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readImageDatasetFromMultiFiles_call extends org.apache.thrift.async.TAsyncMethodCall<ImageDataset> {
      private java.util.List<java.lang.String> files;
      private boolean isTimeSeries;
      private double timeInterval;
      public readImageDatasetFromMultiFiles_call(java.util.List<java.lang.String> files, boolean isTimeSeries, double timeInterval, org.apache.thrift.async.AsyncMethodCallback<ImageDataset> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.files = files;
        this.isTimeSeries = isTimeSeries;
        this.timeInterval = timeInterval;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readImageDatasetFromMultiFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readImageDatasetFromMultiFiles_args args = new readImageDatasetFromMultiFiles_args();
        args.setFiles(files);
        args.setIsTimeSeries(isTimeSeries);
        args.setTimeInterval(timeInterval);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ImageDataset getResult() throws ThriftImageException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readImageDatasetFromMultiFiles();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getImageSizeInfo", new getImageSizeInfo());
      processMap.put("getImageSizeInfoForceZ", new getImageSizeInfoForceZ());
      processMap.put("readImageDataset", new readImageDataset());
      processMap.put("readImageDatasetChannels", new readImageDatasetChannels());
      processMap.put("readImageDatasetFromMultiFiles", new readImageDatasetFromMultiFiles());
      return processMap;
    }

    public static class getImageSizeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getImageSizeInfo_args> {
      public getImageSizeInfo() {
        super("getImageSizeInfo");
      }

      public getImageSizeInfo_args getEmptyArgsInstance() {
        return new getImageSizeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getImageSizeInfo_result getResult(I iface, getImageSizeInfo_args args) throws org.apache.thrift.TException {
        getImageSizeInfo_result result = new getImageSizeInfo_result();
        try {
          result.success = iface.getImageSizeInfo(args.fileName);
        } catch (ThriftImageException imageException) {
          result.imageException = imageException;
        }
        return result;
      }
    }

    public static class getImageSizeInfoForceZ<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getImageSizeInfoForceZ_args> {
      public getImageSizeInfoForceZ() {
        super("getImageSizeInfoForceZ");
      }

      public getImageSizeInfoForceZ_args getEmptyArgsInstance() {
        return new getImageSizeInfoForceZ_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getImageSizeInfoForceZ_result getResult(I iface, getImageSizeInfoForceZ_args args) throws org.apache.thrift.TException {
        getImageSizeInfoForceZ_result result = new getImageSizeInfoForceZ_result();
        try {
          result.success = iface.getImageSizeInfoForceZ(args.fileName, args.forceZSize);
        } catch (ThriftImageException imageException) {
          result.imageException = imageException;
        }
        return result;
      }
    }

    public static class readImageDataset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readImageDataset_args> {
      public readImageDataset() {
        super("readImageDataset");
      }

      public readImageDataset_args getEmptyArgsInstance() {
        return new readImageDataset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readImageDataset_result getResult(I iface, readImageDataset_args args) throws org.apache.thrift.TException {
        readImageDataset_result result = new readImageDataset_result();
        try {
          result.success = iface.readImageDataset(args.imageID);
        } catch (ThriftImageException imageException) {
          result.imageException = imageException;
        }
        return result;
      }
    }

    public static class readImageDatasetChannels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readImageDatasetChannels_args> {
      public readImageDatasetChannels() {
        super("readImageDatasetChannels");
      }

      public readImageDatasetChannels_args getEmptyArgsInstance() {
        return new readImageDatasetChannels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readImageDatasetChannels_result getResult(I iface, readImageDatasetChannels_args args) throws org.apache.thrift.TException {
        readImageDatasetChannels_result result = new readImageDatasetChannels_result();
        try {
          result.success = iface.readImageDatasetChannels(args.imageID, args.bMergeChannels, args.timeIndex, args.resize);
        } catch (ThriftImageException imageException) {
          result.imageException = imageException;
        }
        return result;
      }
    }

    public static class readImageDatasetFromMultiFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readImageDatasetFromMultiFiles_args> {
      public readImageDatasetFromMultiFiles() {
        super("readImageDatasetFromMultiFiles");
      }

      public readImageDatasetFromMultiFiles_args getEmptyArgsInstance() {
        return new readImageDatasetFromMultiFiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readImageDatasetFromMultiFiles_result getResult(I iface, readImageDatasetFromMultiFiles_args args) throws org.apache.thrift.TException {
        readImageDatasetFromMultiFiles_result result = new readImageDatasetFromMultiFiles_result();
        try {
          result.success = iface.readImageDatasetFromMultiFiles(args.files, args.isTimeSeries, args.timeInterval);
        } catch (ThriftImageException imageException) {
          result.imageException = imageException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getImageSizeInfo", new getImageSizeInfo());
      processMap.put("getImageSizeInfoForceZ", new getImageSizeInfoForceZ());
      processMap.put("readImageDataset", new readImageDataset());
      processMap.put("readImageDatasetChannels", new readImageDatasetChannels());
      processMap.put("readImageDatasetFromMultiFiles", new readImageDatasetFromMultiFiles());
      return processMap;
    }

    public static class getImageSizeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getImageSizeInfo_args, ImageSizeInfo> {
      public getImageSizeInfo() {
        super("getImageSizeInfo");
      }

      public getImageSizeInfo_args getEmptyArgsInstance() {
        return new getImageSizeInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo>() { 
          public void onComplete(ImageSizeInfo o) {
            getImageSizeInfo_result result = new getImageSizeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getImageSizeInfo_result result = new getImageSizeInfo_result();
            if (e instanceof ThriftImageException) {
              result.imageException = (ThriftImageException) e;
              result.setImageExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getImageSizeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getImageSizeInfo(args.fileName,resultHandler);
      }
    }

    public static class getImageSizeInfoForceZ<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getImageSizeInfoForceZ_args, ImageSizeInfo> {
      public getImageSizeInfoForceZ() {
        super("getImageSizeInfoForceZ");
      }

      public getImageSizeInfoForceZ_args getEmptyArgsInstance() {
        return new getImageSizeInfoForceZ_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo>() { 
          public void onComplete(ImageSizeInfo o) {
            getImageSizeInfoForceZ_result result = new getImageSizeInfoForceZ_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getImageSizeInfoForceZ_result result = new getImageSizeInfoForceZ_result();
            if (e instanceof ThriftImageException) {
              result.imageException = (ThriftImageException) e;
              result.setImageExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getImageSizeInfoForceZ_args args, org.apache.thrift.async.AsyncMethodCallback<ImageSizeInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getImageSizeInfoForceZ(args.fileName, args.forceZSize,resultHandler);
      }
    }

    public static class readImageDataset<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readImageDataset_args, ImageDataset> {
      public readImageDataset() {
        super("readImageDataset");
      }

      public readImageDataset_args getEmptyArgsInstance() {
        return new readImageDataset_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ImageDataset> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ImageDataset>() { 
          public void onComplete(ImageDataset o) {
            readImageDataset_result result = new readImageDataset_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readImageDataset_result result = new readImageDataset_result();
            if (e instanceof ThriftImageException) {
              result.imageException = (ThriftImageException) e;
              result.setImageExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readImageDataset_args args, org.apache.thrift.async.AsyncMethodCallback<ImageDataset> resultHandler) throws org.apache.thrift.TException {
        iface.readImageDataset(args.imageID,resultHandler);
      }
    }

    public static class readImageDatasetChannels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readImageDatasetChannels_args, java.util.List<ImageDataset>> {
      public readImageDatasetChannels() {
        super("readImageDatasetChannels");
      }

      public readImageDatasetChannels_args getEmptyArgsInstance() {
        return new readImageDatasetChannels_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ImageDataset>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ImageDataset>>() { 
          public void onComplete(java.util.List<ImageDataset> o) {
            readImageDatasetChannels_result result = new readImageDatasetChannels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readImageDatasetChannels_result result = new readImageDatasetChannels_result();
            if (e instanceof ThriftImageException) {
              result.imageException = (ThriftImageException) e;
              result.setImageExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readImageDatasetChannels_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ImageDataset>> resultHandler) throws org.apache.thrift.TException {
        iface.readImageDatasetChannels(args.imageID, args.bMergeChannels, args.timeIndex, args.resize,resultHandler);
      }
    }

    public static class readImageDatasetFromMultiFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readImageDatasetFromMultiFiles_args, ImageDataset> {
      public readImageDatasetFromMultiFiles() {
        super("readImageDatasetFromMultiFiles");
      }

      public readImageDatasetFromMultiFiles_args getEmptyArgsInstance() {
        return new readImageDatasetFromMultiFiles_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ImageDataset> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ImageDataset>() { 
          public void onComplete(ImageDataset o) {
            readImageDatasetFromMultiFiles_result result = new readImageDatasetFromMultiFiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readImageDatasetFromMultiFiles_result result = new readImageDatasetFromMultiFiles_result();
            if (e instanceof ThriftImageException) {
              result.imageException = (ThriftImageException) e;
              result.setImageExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readImageDatasetFromMultiFiles_args args, org.apache.thrift.async.AsyncMethodCallback<ImageDataset> resultHandler) throws org.apache.thrift.TException {
        iface.readImageDatasetFromMultiFiles(args.files, args.isTimeSeries, args.timeInterval,resultHandler);
      }
    }

  }

  public static class getImageSizeInfo_args implements org.apache.thrift.TBase<getImageSizeInfo_args, getImageSizeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getImageSizeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImageSizeInfo_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImageSizeInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImageSizeInfo_argsTupleSchemeFactory();

    public java.lang.String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImageSizeInfo_args.class, metaDataMap);
    }

    public getImageSizeInfo_args() {
    }

    public getImageSizeInfo_args(
      java.lang.String fileName)
    {
      this();
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImageSizeInfo_args(getImageSizeInfo_args other) {
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public getImageSizeInfo_args deepCopy() {
      return new getImageSizeInfo_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
    }

    public java.lang.String getFileName() {
      return this.fileName;
    }

    public getImageSizeInfo_args setFileName(java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImageSizeInfo_args)
        return this.equals((getImageSizeInfo_args)that);
      return false;
    }

    public boolean equals(getImageSizeInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImageSizeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImageSizeInfo_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImageSizeInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageSizeInfo_argsStandardScheme getScheme() {
        return new getImageSizeInfo_argsStandardScheme();
      }
    }

    private static class getImageSizeInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImageSizeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImageSizeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImageSizeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImageSizeInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageSizeInfo_argsTupleScheme getScheme() {
        return new getImageSizeInfo_argsTupleScheme();
      }
    }

    private static class getImageSizeInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImageSizeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImageSizeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImageSizeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImageSizeInfo_result implements org.apache.thrift.TBase<getImageSizeInfo_result, getImageSizeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getImageSizeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImageSizeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IMAGE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("imageException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImageSizeInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImageSizeInfo_resultTupleSchemeFactory();

    public ImageSizeInfo success; // required
    public ThriftImageException imageException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IMAGE_EXCEPTION((short)1, "imageException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IMAGE_EXCEPTION
            return IMAGE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImageSizeInfo.class)));
      tmpMap.put(_Fields.IMAGE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("imageException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftImageException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImageSizeInfo_result.class, metaDataMap);
    }

    public getImageSizeInfo_result() {
    }

    public getImageSizeInfo_result(
      ImageSizeInfo success,
      ThriftImageException imageException)
    {
      this();
      this.success = success;
      this.imageException = imageException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImageSizeInfo_result(getImageSizeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ImageSizeInfo(other.success);
      }
      if (other.isSetImageException()) {
        this.imageException = new ThriftImageException(other.imageException);
      }
    }

    public getImageSizeInfo_result deepCopy() {
      return new getImageSizeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.imageException = null;
    }

    public ImageSizeInfo getSuccess() {
      return this.success;
    }

    public getImageSizeInfo_result setSuccess(ImageSizeInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftImageException getImageException() {
      return this.imageException;
    }

    public getImageSizeInfo_result setImageException(ThriftImageException imageException) {
      this.imageException = imageException;
      return this;
    }

    public void unsetImageException() {
      this.imageException = null;
    }

    /** Returns true if field imageException is set (has been assigned a value) and false otherwise */
    public boolean isSetImageException() {
      return this.imageException != null;
    }

    public void setImageExceptionIsSet(boolean value) {
      if (!value) {
        this.imageException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ImageSizeInfo)value);
        }
        break;

      case IMAGE_EXCEPTION:
        if (value == null) {
          unsetImageException();
        } else {
          setImageException((ThriftImageException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IMAGE_EXCEPTION:
        return getImageException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IMAGE_EXCEPTION:
        return isSetImageException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImageSizeInfo_result)
        return this.equals((getImageSizeInfo_result)that);
      return false;
    }

    public boolean equals(getImageSizeInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_imageException = true && this.isSetImageException();
      boolean that_present_imageException = true && that.isSetImageException();
      if (this_present_imageException || that_present_imageException) {
        if (!(this_present_imageException && that_present_imageException))
          return false;
        if (!this.imageException.equals(that.imageException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetImageException()) ? 131071 : 524287);
      if (isSetImageException())
        hashCode = hashCode * 8191 + imageException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImageSizeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetImageException()).compareTo(other.isSetImageException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageException, other.imageException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImageSizeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageException:");
      if (this.imageException == null) {
        sb.append("null");
      } else {
        sb.append(this.imageException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImageSizeInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageSizeInfo_resultStandardScheme getScheme() {
        return new getImageSizeInfo_resultStandardScheme();
      }
    }

    private static class getImageSizeInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImageSizeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImageSizeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ImageSizeInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IMAGE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.imageException = new ThriftImageException();
                struct.imageException.read(iprot);
                struct.setImageExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImageSizeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.imageException != null) {
          oprot.writeFieldBegin(IMAGE_EXCEPTION_FIELD_DESC);
          struct.imageException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImageSizeInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageSizeInfo_resultTupleScheme getScheme() {
        return new getImageSizeInfo_resultTupleScheme();
      }
    }

    private static class getImageSizeInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImageSizeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImageSizeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetImageException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetImageException()) {
          struct.imageException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImageSizeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ImageSizeInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.imageException = new ThriftImageException();
          struct.imageException.read(iprot);
          struct.setImageExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImageSizeInfoForceZ_args implements org.apache.thrift.TBase<getImageSizeInfoForceZ_args, getImageSizeInfoForceZ_args._Fields>, java.io.Serializable, Cloneable, Comparable<getImageSizeInfoForceZ_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImageSizeInfoForceZ_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FORCE_ZSIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("forceZSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImageSizeInfoForceZ_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImageSizeInfoForceZ_argsTupleSchemeFactory();

    public java.lang.String fileName; // required
    public int forceZSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName"),
      FORCE_ZSIZE((short)2, "forceZSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // FORCE_ZSIZE
            return FORCE_ZSIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FORCEZSIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FORCE_ZSIZE, new org.apache.thrift.meta_data.FieldMetaData("forceZSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImageSizeInfoForceZ_args.class, metaDataMap);
    }

    public getImageSizeInfoForceZ_args() {
    }

    public getImageSizeInfoForceZ_args(
      java.lang.String fileName,
      int forceZSize)
    {
      this();
      this.fileName = fileName;
      this.forceZSize = forceZSize;
      setForceZSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImageSizeInfoForceZ_args(getImageSizeInfoForceZ_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      this.forceZSize = other.forceZSize;
    }

    public getImageSizeInfoForceZ_args deepCopy() {
      return new getImageSizeInfoForceZ_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
      setForceZSizeIsSet(false);
      this.forceZSize = 0;
    }

    public java.lang.String getFileName() {
      return this.fileName;
    }

    public getImageSizeInfoForceZ_args setFileName(java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public int getForceZSize() {
      return this.forceZSize;
    }

    public getImageSizeInfoForceZ_args setForceZSize(int forceZSize) {
      this.forceZSize = forceZSize;
      setForceZSizeIsSet(true);
      return this;
    }

    public void unsetForceZSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORCEZSIZE_ISSET_ID);
    }

    /** Returns true if field forceZSize is set (has been assigned a value) and false otherwise */
    public boolean isSetForceZSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORCEZSIZE_ISSET_ID);
    }

    public void setForceZSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORCEZSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FORCE_ZSIZE:
        if (value == null) {
          unsetForceZSize();
        } else {
          setForceZSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      case FORCE_ZSIZE:
        return getForceZSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      case FORCE_ZSIZE:
        return isSetForceZSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImageSizeInfoForceZ_args)
        return this.equals((getImageSizeInfoForceZ_args)that);
      return false;
    }

    public boolean equals(getImageSizeInfoForceZ_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_forceZSize = true;
      boolean that_present_forceZSize = true;
      if (this_present_forceZSize || that_present_forceZSize) {
        if (!(this_present_forceZSize && that_present_forceZSize))
          return false;
        if (this.forceZSize != that.forceZSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + forceZSize;

      return hashCode;
    }

    @Override
    public int compareTo(getImageSizeInfoForceZ_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetForceZSize()).compareTo(other.isSetForceZSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForceZSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forceZSize, other.forceZSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImageSizeInfoForceZ_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forceZSize:");
      sb.append(this.forceZSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImageSizeInfoForceZ_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageSizeInfoForceZ_argsStandardScheme getScheme() {
        return new getImageSizeInfoForceZ_argsStandardScheme();
      }
    }

    private static class getImageSizeInfoForceZ_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImageSizeInfoForceZ_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImageSizeInfoForceZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FORCE_ZSIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.forceZSize = iprot.readI32();
                struct.setForceZSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImageSizeInfoForceZ_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FORCE_ZSIZE_FIELD_DESC);
        oprot.writeI32(struct.forceZSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImageSizeInfoForceZ_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageSizeInfoForceZ_argsTupleScheme getScheme() {
        return new getImageSizeInfoForceZ_argsTupleScheme();
      }
    }

    private static class getImageSizeInfoForceZ_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImageSizeInfoForceZ_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImageSizeInfoForceZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        if (struct.isSetForceZSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetForceZSize()) {
          oprot.writeI32(struct.forceZSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImageSizeInfoForceZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.forceZSize = iprot.readI32();
          struct.setForceZSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImageSizeInfoForceZ_result implements org.apache.thrift.TBase<getImageSizeInfoForceZ_result, getImageSizeInfoForceZ_result._Fields>, java.io.Serializable, Cloneable, Comparable<getImageSizeInfoForceZ_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImageSizeInfoForceZ_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IMAGE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("imageException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImageSizeInfoForceZ_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImageSizeInfoForceZ_resultTupleSchemeFactory();

    public ImageSizeInfo success; // required
    public ThriftImageException imageException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IMAGE_EXCEPTION((short)1, "imageException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IMAGE_EXCEPTION
            return IMAGE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImageSizeInfo.class)));
      tmpMap.put(_Fields.IMAGE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("imageException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftImageException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImageSizeInfoForceZ_result.class, metaDataMap);
    }

    public getImageSizeInfoForceZ_result() {
    }

    public getImageSizeInfoForceZ_result(
      ImageSizeInfo success,
      ThriftImageException imageException)
    {
      this();
      this.success = success;
      this.imageException = imageException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImageSizeInfoForceZ_result(getImageSizeInfoForceZ_result other) {
      if (other.isSetSuccess()) {
        this.success = new ImageSizeInfo(other.success);
      }
      if (other.isSetImageException()) {
        this.imageException = new ThriftImageException(other.imageException);
      }
    }

    public getImageSizeInfoForceZ_result deepCopy() {
      return new getImageSizeInfoForceZ_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.imageException = null;
    }

    public ImageSizeInfo getSuccess() {
      return this.success;
    }

    public getImageSizeInfoForceZ_result setSuccess(ImageSizeInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftImageException getImageException() {
      return this.imageException;
    }

    public getImageSizeInfoForceZ_result setImageException(ThriftImageException imageException) {
      this.imageException = imageException;
      return this;
    }

    public void unsetImageException() {
      this.imageException = null;
    }

    /** Returns true if field imageException is set (has been assigned a value) and false otherwise */
    public boolean isSetImageException() {
      return this.imageException != null;
    }

    public void setImageExceptionIsSet(boolean value) {
      if (!value) {
        this.imageException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ImageSizeInfo)value);
        }
        break;

      case IMAGE_EXCEPTION:
        if (value == null) {
          unsetImageException();
        } else {
          setImageException((ThriftImageException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IMAGE_EXCEPTION:
        return getImageException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IMAGE_EXCEPTION:
        return isSetImageException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImageSizeInfoForceZ_result)
        return this.equals((getImageSizeInfoForceZ_result)that);
      return false;
    }

    public boolean equals(getImageSizeInfoForceZ_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_imageException = true && this.isSetImageException();
      boolean that_present_imageException = true && that.isSetImageException();
      if (this_present_imageException || that_present_imageException) {
        if (!(this_present_imageException && that_present_imageException))
          return false;
        if (!this.imageException.equals(that.imageException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetImageException()) ? 131071 : 524287);
      if (isSetImageException())
        hashCode = hashCode * 8191 + imageException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImageSizeInfoForceZ_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetImageException()).compareTo(other.isSetImageException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageException, other.imageException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImageSizeInfoForceZ_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageException:");
      if (this.imageException == null) {
        sb.append("null");
      } else {
        sb.append(this.imageException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImageSizeInfoForceZ_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageSizeInfoForceZ_resultStandardScheme getScheme() {
        return new getImageSizeInfoForceZ_resultStandardScheme();
      }
    }

    private static class getImageSizeInfoForceZ_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImageSizeInfoForceZ_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImageSizeInfoForceZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ImageSizeInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IMAGE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.imageException = new ThriftImageException();
                struct.imageException.read(iprot);
                struct.setImageExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImageSizeInfoForceZ_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.imageException != null) {
          oprot.writeFieldBegin(IMAGE_EXCEPTION_FIELD_DESC);
          struct.imageException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImageSizeInfoForceZ_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageSizeInfoForceZ_resultTupleScheme getScheme() {
        return new getImageSizeInfoForceZ_resultTupleScheme();
      }
    }

    private static class getImageSizeInfoForceZ_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImageSizeInfoForceZ_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImageSizeInfoForceZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetImageException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetImageException()) {
          struct.imageException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImageSizeInfoForceZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ImageSizeInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.imageException = new ThriftImageException();
          struct.imageException.read(iprot);
          struct.setImageExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readImageDataset_args implements org.apache.thrift.TBase<readImageDataset_args, readImageDataset_args._Fields>, java.io.Serializable, Cloneable, Comparable<readImageDataset_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readImageDataset_args");

    private static final org.apache.thrift.protocol.TField IMAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readImageDataset_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readImageDataset_argsTupleSchemeFactory();

    public java.lang.String imageID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_ID((short)1, "imageID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_ID
            return IMAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("imageID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readImageDataset_args.class, metaDataMap);
    }

    public readImageDataset_args() {
    }

    public readImageDataset_args(
      java.lang.String imageID)
    {
      this();
      this.imageID = imageID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readImageDataset_args(readImageDataset_args other) {
      if (other.isSetImageID()) {
        this.imageID = other.imageID;
      }
    }

    public readImageDataset_args deepCopy() {
      return new readImageDataset_args(this);
    }

    @Override
    public void clear() {
      this.imageID = null;
    }

    public java.lang.String getImageID() {
      return this.imageID;
    }

    public readImageDataset_args setImageID(java.lang.String imageID) {
      this.imageID = imageID;
      return this;
    }

    public void unsetImageID() {
      this.imageID = null;
    }

    /** Returns true if field imageID is set (has been assigned a value) and false otherwise */
    public boolean isSetImageID() {
      return this.imageID != null;
    }

    public void setImageIDIsSet(boolean value) {
      if (!value) {
        this.imageID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IMAGE_ID:
        if (value == null) {
          unsetImageID();
        } else {
          setImageID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_ID:
        return getImageID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_ID:
        return isSetImageID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readImageDataset_args)
        return this.equals((readImageDataset_args)that);
      return false;
    }

    public boolean equals(readImageDataset_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_imageID = true && this.isSetImageID();
      boolean that_present_imageID = true && that.isSetImageID();
      if (this_present_imageID || that_present_imageID) {
        if (!(this_present_imageID && that_present_imageID))
          return false;
        if (!this.imageID.equals(that.imageID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetImageID()) ? 131071 : 524287);
      if (isSetImageID())
        hashCode = hashCode * 8191 + imageID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readImageDataset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetImageID()).compareTo(other.isSetImageID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageID, other.imageID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readImageDataset_args(");
      boolean first = true;

      sb.append("imageID:");
      if (this.imageID == null) {
        sb.append("null");
      } else {
        sb.append(this.imageID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readImageDataset_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDataset_argsStandardScheme getScheme() {
        return new readImageDataset_argsStandardScheme();
      }
    }

    private static class readImageDataset_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readImageDataset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readImageDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageID = iprot.readString();
                struct.setImageIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readImageDataset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imageID != null) {
          oprot.writeFieldBegin(IMAGE_ID_FIELD_DESC);
          oprot.writeString(struct.imageID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readImageDataset_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDataset_argsTupleScheme getScheme() {
        return new readImageDataset_argsTupleScheme();
      }
    }

    private static class readImageDataset_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readImageDataset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readImageDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetImageID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetImageID()) {
          oprot.writeString(struct.imageID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readImageDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.imageID = iprot.readString();
          struct.setImageIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readImageDataset_result implements org.apache.thrift.TBase<readImageDataset_result, readImageDataset_result._Fields>, java.io.Serializable, Cloneable, Comparable<readImageDataset_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readImageDataset_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IMAGE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("imageException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readImageDataset_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readImageDataset_resultTupleSchemeFactory();

    public ImageDataset success; // required
    public ThriftImageException imageException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IMAGE_EXCEPTION((short)1, "imageException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IMAGE_EXCEPTION
            return IMAGE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImageDataset.class)));
      tmpMap.put(_Fields.IMAGE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("imageException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftImageException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readImageDataset_result.class, metaDataMap);
    }

    public readImageDataset_result() {
    }

    public readImageDataset_result(
      ImageDataset success,
      ThriftImageException imageException)
    {
      this();
      this.success = success;
      this.imageException = imageException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readImageDataset_result(readImageDataset_result other) {
      if (other.isSetSuccess()) {
        this.success = new ImageDataset(other.success);
      }
      if (other.isSetImageException()) {
        this.imageException = new ThriftImageException(other.imageException);
      }
    }

    public readImageDataset_result deepCopy() {
      return new readImageDataset_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.imageException = null;
    }

    public ImageDataset getSuccess() {
      return this.success;
    }

    public readImageDataset_result setSuccess(ImageDataset success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftImageException getImageException() {
      return this.imageException;
    }

    public readImageDataset_result setImageException(ThriftImageException imageException) {
      this.imageException = imageException;
      return this;
    }

    public void unsetImageException() {
      this.imageException = null;
    }

    /** Returns true if field imageException is set (has been assigned a value) and false otherwise */
    public boolean isSetImageException() {
      return this.imageException != null;
    }

    public void setImageExceptionIsSet(boolean value) {
      if (!value) {
        this.imageException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ImageDataset)value);
        }
        break;

      case IMAGE_EXCEPTION:
        if (value == null) {
          unsetImageException();
        } else {
          setImageException((ThriftImageException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IMAGE_EXCEPTION:
        return getImageException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IMAGE_EXCEPTION:
        return isSetImageException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readImageDataset_result)
        return this.equals((readImageDataset_result)that);
      return false;
    }

    public boolean equals(readImageDataset_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_imageException = true && this.isSetImageException();
      boolean that_present_imageException = true && that.isSetImageException();
      if (this_present_imageException || that_present_imageException) {
        if (!(this_present_imageException && that_present_imageException))
          return false;
        if (!this.imageException.equals(that.imageException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetImageException()) ? 131071 : 524287);
      if (isSetImageException())
        hashCode = hashCode * 8191 + imageException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readImageDataset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetImageException()).compareTo(other.isSetImageException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageException, other.imageException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readImageDataset_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageException:");
      if (this.imageException == null) {
        sb.append("null");
      } else {
        sb.append(this.imageException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readImageDataset_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDataset_resultStandardScheme getScheme() {
        return new readImageDataset_resultStandardScheme();
      }
    }

    private static class readImageDataset_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readImageDataset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readImageDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ImageDataset();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IMAGE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.imageException = new ThriftImageException();
                struct.imageException.read(iprot);
                struct.setImageExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readImageDataset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.imageException != null) {
          oprot.writeFieldBegin(IMAGE_EXCEPTION_FIELD_DESC);
          struct.imageException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readImageDataset_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDataset_resultTupleScheme getScheme() {
        return new readImageDataset_resultTupleScheme();
      }
    }

    private static class readImageDataset_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readImageDataset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readImageDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetImageException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetImageException()) {
          struct.imageException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readImageDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ImageDataset();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.imageException = new ThriftImageException();
          struct.imageException.read(iprot);
          struct.setImageExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readImageDatasetChannels_args implements org.apache.thrift.TBase<readImageDatasetChannels_args, readImageDatasetChannels_args._Fields>, java.io.Serializable, Cloneable, Comparable<readImageDatasetChannels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readImageDatasetChannels_args");

    private static final org.apache.thrift.protocol.TField IMAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField B_MERGE_CHANNELS_FIELD_DESC = new org.apache.thrift.protocol.TField("bMergeChannels", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("timeIndex", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("resize", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readImageDatasetChannels_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readImageDatasetChannels_argsTupleSchemeFactory();

    public java.lang.String imageID; // required
    public boolean bMergeChannels; // required
    public int timeIndex; // required
    public ISize resize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_ID((short)1, "imageID"),
      B_MERGE_CHANNELS((short)2, "bMergeChannels"),
      TIME_INDEX((short)3, "timeIndex"),
      RESIZE((short)4, "resize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_ID
            return IMAGE_ID;
          case 2: // B_MERGE_CHANNELS
            return B_MERGE_CHANNELS;
          case 3: // TIME_INDEX
            return TIME_INDEX;
          case 4: // RESIZE
            return RESIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BMERGECHANNELS_ISSET_ID = 0;
    private static final int __TIMEINDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("imageID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.B_MERGE_CHANNELS, new org.apache.thrift.meta_data.FieldMetaData("bMergeChannels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TIME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("timeIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.RESIZE, new org.apache.thrift.meta_data.FieldMetaData("resize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ISize.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readImageDatasetChannels_args.class, metaDataMap);
    }

    public readImageDatasetChannels_args() {
    }

    public readImageDatasetChannels_args(
      java.lang.String imageID,
      boolean bMergeChannels,
      int timeIndex,
      ISize resize)
    {
      this();
      this.imageID = imageID;
      this.bMergeChannels = bMergeChannels;
      setBMergeChannelsIsSet(true);
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
      this.resize = resize;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readImageDatasetChannels_args(readImageDatasetChannels_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetImageID()) {
        this.imageID = other.imageID;
      }
      this.bMergeChannels = other.bMergeChannels;
      this.timeIndex = other.timeIndex;
      if (other.isSetResize()) {
        this.resize = new ISize(other.resize);
      }
    }

    public readImageDatasetChannels_args deepCopy() {
      return new readImageDatasetChannels_args(this);
    }

    @Override
    public void clear() {
      this.imageID = null;
      setBMergeChannelsIsSet(false);
      this.bMergeChannels = false;
      setTimeIndexIsSet(false);
      this.timeIndex = 0;
      this.resize = null;
    }

    public java.lang.String getImageID() {
      return this.imageID;
    }

    public readImageDatasetChannels_args setImageID(java.lang.String imageID) {
      this.imageID = imageID;
      return this;
    }

    public void unsetImageID() {
      this.imageID = null;
    }

    /** Returns true if field imageID is set (has been assigned a value) and false otherwise */
    public boolean isSetImageID() {
      return this.imageID != null;
    }

    public void setImageIDIsSet(boolean value) {
      if (!value) {
        this.imageID = null;
      }
    }

    public boolean isBMergeChannels() {
      return this.bMergeChannels;
    }

    public readImageDatasetChannels_args setBMergeChannels(boolean bMergeChannels) {
      this.bMergeChannels = bMergeChannels;
      setBMergeChannelsIsSet(true);
      return this;
    }

    public void unsetBMergeChannels() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BMERGECHANNELS_ISSET_ID);
    }

    /** Returns true if field bMergeChannels is set (has been assigned a value) and false otherwise */
    public boolean isSetBMergeChannels() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BMERGECHANNELS_ISSET_ID);
    }

    public void setBMergeChannelsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BMERGECHANNELS_ISSET_ID, value);
    }

    public int getTimeIndex() {
      return this.timeIndex;
    }

    public readImageDatasetChannels_args setTimeIndex(int timeIndex) {
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
      return this;
    }

    public void unsetTimeIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    /** Returns true if field timeIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    public void setTimeIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEINDEX_ISSET_ID, value);
    }

    public ISize getResize() {
      return this.resize;
    }

    public readImageDatasetChannels_args setResize(ISize resize) {
      this.resize = resize;
      return this;
    }

    public void unsetResize() {
      this.resize = null;
    }

    /** Returns true if field resize is set (has been assigned a value) and false otherwise */
    public boolean isSetResize() {
      return this.resize != null;
    }

    public void setResizeIsSet(boolean value) {
      if (!value) {
        this.resize = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IMAGE_ID:
        if (value == null) {
          unsetImageID();
        } else {
          setImageID((java.lang.String)value);
        }
        break;

      case B_MERGE_CHANNELS:
        if (value == null) {
          unsetBMergeChannels();
        } else {
          setBMergeChannels((java.lang.Boolean)value);
        }
        break;

      case TIME_INDEX:
        if (value == null) {
          unsetTimeIndex();
        } else {
          setTimeIndex((java.lang.Integer)value);
        }
        break;

      case RESIZE:
        if (value == null) {
          unsetResize();
        } else {
          setResize((ISize)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_ID:
        return getImageID();

      case B_MERGE_CHANNELS:
        return isBMergeChannels();

      case TIME_INDEX:
        return getTimeIndex();

      case RESIZE:
        return getResize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_ID:
        return isSetImageID();
      case B_MERGE_CHANNELS:
        return isSetBMergeChannels();
      case TIME_INDEX:
        return isSetTimeIndex();
      case RESIZE:
        return isSetResize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readImageDatasetChannels_args)
        return this.equals((readImageDatasetChannels_args)that);
      return false;
    }

    public boolean equals(readImageDatasetChannels_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_imageID = true && this.isSetImageID();
      boolean that_present_imageID = true && that.isSetImageID();
      if (this_present_imageID || that_present_imageID) {
        if (!(this_present_imageID && that_present_imageID))
          return false;
        if (!this.imageID.equals(that.imageID))
          return false;
      }

      boolean this_present_bMergeChannels = true;
      boolean that_present_bMergeChannels = true;
      if (this_present_bMergeChannels || that_present_bMergeChannels) {
        if (!(this_present_bMergeChannels && that_present_bMergeChannels))
          return false;
        if (this.bMergeChannels != that.bMergeChannels)
          return false;
      }

      boolean this_present_timeIndex = true;
      boolean that_present_timeIndex = true;
      if (this_present_timeIndex || that_present_timeIndex) {
        if (!(this_present_timeIndex && that_present_timeIndex))
          return false;
        if (this.timeIndex != that.timeIndex)
          return false;
      }

      boolean this_present_resize = true && this.isSetResize();
      boolean that_present_resize = true && that.isSetResize();
      if (this_present_resize || that_present_resize) {
        if (!(this_present_resize && that_present_resize))
          return false;
        if (!this.resize.equals(that.resize))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetImageID()) ? 131071 : 524287);
      if (isSetImageID())
        hashCode = hashCode * 8191 + imageID.hashCode();

      hashCode = hashCode * 8191 + ((bMergeChannels) ? 131071 : 524287);

      hashCode = hashCode * 8191 + timeIndex;

      hashCode = hashCode * 8191 + ((isSetResize()) ? 131071 : 524287);
      if (isSetResize())
        hashCode = hashCode * 8191 + resize.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readImageDatasetChannels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetImageID()).compareTo(other.isSetImageID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageID, other.imageID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBMergeChannels()).compareTo(other.isSetBMergeChannels());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBMergeChannels()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bMergeChannels, other.bMergeChannels);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeIndex()).compareTo(other.isSetTimeIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeIndex, other.timeIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetResize()).compareTo(other.isSetResize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resize, other.resize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readImageDatasetChannels_args(");
      boolean first = true;

      sb.append("imageID:");
      if (this.imageID == null) {
        sb.append("null");
      } else {
        sb.append(this.imageID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bMergeChannels:");
      sb.append(this.bMergeChannels);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeIndex:");
      sb.append(this.timeIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("resize:");
      if (this.resize == null) {
        sb.append("null");
      } else {
        sb.append(this.resize);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (resize != null) {
        resize.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readImageDatasetChannels_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDatasetChannels_argsStandardScheme getScheme() {
        return new readImageDatasetChannels_argsStandardScheme();
      }
    }

    private static class readImageDatasetChannels_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readImageDatasetChannels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readImageDatasetChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageID = iprot.readString();
                struct.setImageIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // B_MERGE_CHANNELS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.bMergeChannels = iprot.readBool();
                struct.setBMergeChannelsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeIndex = iprot.readI32();
                struct.setTimeIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RESIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.resize = new ISize();
                struct.resize.read(iprot);
                struct.setResizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readImageDatasetChannels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imageID != null) {
          oprot.writeFieldBegin(IMAGE_ID_FIELD_DESC);
          oprot.writeString(struct.imageID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(B_MERGE_CHANNELS_FIELD_DESC);
        oprot.writeBool(struct.bMergeChannels);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_INDEX_FIELD_DESC);
        oprot.writeI32(struct.timeIndex);
        oprot.writeFieldEnd();
        if (struct.resize != null) {
          oprot.writeFieldBegin(RESIZE_FIELD_DESC);
          struct.resize.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readImageDatasetChannels_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDatasetChannels_argsTupleScheme getScheme() {
        return new readImageDatasetChannels_argsTupleScheme();
      }
    }

    private static class readImageDatasetChannels_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readImageDatasetChannels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readImageDatasetChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetImageID()) {
          optionals.set(0);
        }
        if (struct.isSetBMergeChannels()) {
          optionals.set(1);
        }
        if (struct.isSetTimeIndex()) {
          optionals.set(2);
        }
        if (struct.isSetResize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetImageID()) {
          oprot.writeString(struct.imageID);
        }
        if (struct.isSetBMergeChannels()) {
          oprot.writeBool(struct.bMergeChannels);
        }
        if (struct.isSetTimeIndex()) {
          oprot.writeI32(struct.timeIndex);
        }
        if (struct.isSetResize()) {
          struct.resize.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readImageDatasetChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.imageID = iprot.readString();
          struct.setImageIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bMergeChannels = iprot.readBool();
          struct.setBMergeChannelsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeIndex = iprot.readI32();
          struct.setTimeIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.resize = new ISize();
          struct.resize.read(iprot);
          struct.setResizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readImageDatasetChannels_result implements org.apache.thrift.TBase<readImageDatasetChannels_result, readImageDatasetChannels_result._Fields>, java.io.Serializable, Cloneable, Comparable<readImageDatasetChannels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readImageDatasetChannels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IMAGE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("imageException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readImageDatasetChannels_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readImageDatasetChannels_resultTupleSchemeFactory();

    public java.util.List<ImageDataset> success; // required
    public ThriftImageException imageException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IMAGE_EXCEPTION((short)1, "imageException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IMAGE_EXCEPTION
            return IMAGE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ImageDatasetList")));
      tmpMap.put(_Fields.IMAGE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("imageException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftImageException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readImageDatasetChannels_result.class, metaDataMap);
    }

    public readImageDatasetChannels_result() {
    }

    public readImageDatasetChannels_result(
      java.util.List<ImageDataset> success,
      ThriftImageException imageException)
    {
      this();
      this.success = success;
      this.imageException = imageException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readImageDatasetChannels_result(readImageDatasetChannels_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ImageDataset> __this__success = new java.util.ArrayList<ImageDataset>(other.success.size());
        for (ImageDataset other_element : other.success) {
          __this__success.add(new ImageDataset(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetImageException()) {
        this.imageException = new ThriftImageException(other.imageException);
      }
    }

    public readImageDatasetChannels_result deepCopy() {
      return new readImageDatasetChannels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.imageException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ImageDataset> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ImageDataset elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ImageDataset>();
      }
      this.success.add(elem);
    }

    public java.util.List<ImageDataset> getSuccess() {
      return this.success;
    }

    public readImageDatasetChannels_result setSuccess(java.util.List<ImageDataset> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftImageException getImageException() {
      return this.imageException;
    }

    public readImageDatasetChannels_result setImageException(ThriftImageException imageException) {
      this.imageException = imageException;
      return this;
    }

    public void unsetImageException() {
      this.imageException = null;
    }

    /** Returns true if field imageException is set (has been assigned a value) and false otherwise */
    public boolean isSetImageException() {
      return this.imageException != null;
    }

    public void setImageExceptionIsSet(boolean value) {
      if (!value) {
        this.imageException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ImageDataset>)value);
        }
        break;

      case IMAGE_EXCEPTION:
        if (value == null) {
          unsetImageException();
        } else {
          setImageException((ThriftImageException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IMAGE_EXCEPTION:
        return getImageException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IMAGE_EXCEPTION:
        return isSetImageException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readImageDatasetChannels_result)
        return this.equals((readImageDatasetChannels_result)that);
      return false;
    }

    public boolean equals(readImageDatasetChannels_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_imageException = true && this.isSetImageException();
      boolean that_present_imageException = true && that.isSetImageException();
      if (this_present_imageException || that_present_imageException) {
        if (!(this_present_imageException && that_present_imageException))
          return false;
        if (!this.imageException.equals(that.imageException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetImageException()) ? 131071 : 524287);
      if (isSetImageException())
        hashCode = hashCode * 8191 + imageException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readImageDatasetChannels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetImageException()).compareTo(other.isSetImageException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageException, other.imageException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readImageDatasetChannels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageException:");
      if (this.imageException == null) {
        sb.append("null");
      } else {
        sb.append(this.imageException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readImageDatasetChannels_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDatasetChannels_resultStandardScheme getScheme() {
        return new readImageDatasetChannels_resultStandardScheme();
      }
    }

    private static class readImageDatasetChannels_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readImageDatasetChannels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readImageDatasetChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ImageDataset>(_list32.size);
                  ImageDataset _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new ImageDataset();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IMAGE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.imageException = new ThriftImageException();
                struct.imageException.read(iprot);
                struct.setImageExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readImageDatasetChannels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ImageDataset _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.imageException != null) {
          oprot.writeFieldBegin(IMAGE_EXCEPTION_FIELD_DESC);
          struct.imageException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readImageDatasetChannels_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDatasetChannels_resultTupleScheme getScheme() {
        return new readImageDatasetChannels_resultTupleScheme();
      }
    }

    private static class readImageDatasetChannels_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readImageDatasetChannels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readImageDatasetChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetImageException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ImageDataset _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetImageException()) {
          struct.imageException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readImageDatasetChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<ImageDataset>(_list37.size);
            ImageDataset _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new ImageDataset();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.imageException = new ThriftImageException();
          struct.imageException.read(iprot);
          struct.setImageExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readImageDatasetFromMultiFiles_args implements org.apache.thrift.TBase<readImageDatasetFromMultiFiles_args, readImageDatasetFromMultiFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<readImageDatasetFromMultiFiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readImageDatasetFromMultiFiles_args");

    private static final org.apache.thrift.protocol.TField FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("files", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField IS_TIME_SERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("isTimeSeries", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("timeInterval", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readImageDatasetFromMultiFiles_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readImageDatasetFromMultiFiles_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> files; // required
    public boolean isTimeSeries; // required
    public double timeInterval; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILES((short)1, "files"),
      IS_TIME_SERIES((short)2, "isTimeSeries"),
      TIME_INTERVAL((short)3, "timeInterval");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILES
            return FILES;
          case 2: // IS_TIME_SERIES
            return IS_TIME_SERIES;
          case 3: // TIME_INTERVAL
            return TIME_INTERVAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISTIMESERIES_ISSET_ID = 0;
    private static final int __TIMEINTERVAL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILES, new org.apache.thrift.meta_data.FieldMetaData("files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "FilePathList")));
      tmpMap.put(_Fields.IS_TIME_SERIES, new org.apache.thrift.meta_data.FieldMetaData("isTimeSeries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TIME_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("timeInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readImageDatasetFromMultiFiles_args.class, metaDataMap);
    }

    public readImageDatasetFromMultiFiles_args() {
    }

    public readImageDatasetFromMultiFiles_args(
      java.util.List<java.lang.String> files,
      boolean isTimeSeries,
      double timeInterval)
    {
      this();
      this.files = files;
      this.isTimeSeries = isTimeSeries;
      setIsTimeSeriesIsSet(true);
      this.timeInterval = timeInterval;
      setTimeIntervalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readImageDatasetFromMultiFiles_args(readImageDatasetFromMultiFiles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFiles()) {
        java.util.List<java.lang.String> __this__files = new java.util.ArrayList<java.lang.String>(other.files.size());
        for (java.lang.String other_element : other.files) {
          __this__files.add(other_element);
        }
        this.files = __this__files;
      }
      this.isTimeSeries = other.isTimeSeries;
      this.timeInterval = other.timeInterval;
    }

    public readImageDatasetFromMultiFiles_args deepCopy() {
      return new readImageDatasetFromMultiFiles_args(this);
    }

    @Override
    public void clear() {
      this.files = null;
      setIsTimeSeriesIsSet(false);
      this.isTimeSeries = false;
      setTimeIntervalIsSet(false);
      this.timeInterval = 0.0;
    }

    public int getFilesSize() {
      return (this.files == null) ? 0 : this.files.size();
    }

    public java.util.Iterator<java.lang.String> getFilesIterator() {
      return (this.files == null) ? null : this.files.iterator();
    }

    public void addToFiles(java.lang.String elem) {
      if (this.files == null) {
        this.files = new java.util.ArrayList<java.lang.String>();
      }
      this.files.add(elem);
    }

    public java.util.List<java.lang.String> getFiles() {
      return this.files;
    }

    public readImageDatasetFromMultiFiles_args setFiles(java.util.List<java.lang.String> files) {
      this.files = files;
      return this;
    }

    public void unsetFiles() {
      this.files = null;
    }

    /** Returns true if field files is set (has been assigned a value) and false otherwise */
    public boolean isSetFiles() {
      return this.files != null;
    }

    public void setFilesIsSet(boolean value) {
      if (!value) {
        this.files = null;
      }
    }

    public boolean isIsTimeSeries() {
      return this.isTimeSeries;
    }

    public readImageDatasetFromMultiFiles_args setIsTimeSeries(boolean isTimeSeries) {
      this.isTimeSeries = isTimeSeries;
      setIsTimeSeriesIsSet(true);
      return this;
    }

    public void unsetIsTimeSeries() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTIMESERIES_ISSET_ID);
    }

    /** Returns true if field isTimeSeries is set (has been assigned a value) and false otherwise */
    public boolean isSetIsTimeSeries() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTIMESERIES_ISSET_ID);
    }

    public void setIsTimeSeriesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTIMESERIES_ISSET_ID, value);
    }

    public double getTimeInterval() {
      return this.timeInterval;
    }

    public readImageDatasetFromMultiFiles_args setTimeInterval(double timeInterval) {
      this.timeInterval = timeInterval;
      setTimeIntervalIsSet(true);
      return this;
    }

    public void unsetTimeInterval() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEINTERVAL_ISSET_ID);
    }

    /** Returns true if field timeInterval is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeInterval() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEINTERVAL_ISSET_ID);
    }

    public void setTimeIntervalIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEINTERVAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILES:
        if (value == null) {
          unsetFiles();
        } else {
          setFiles((java.util.List<java.lang.String>)value);
        }
        break;

      case IS_TIME_SERIES:
        if (value == null) {
          unsetIsTimeSeries();
        } else {
          setIsTimeSeries((java.lang.Boolean)value);
        }
        break;

      case TIME_INTERVAL:
        if (value == null) {
          unsetTimeInterval();
        } else {
          setTimeInterval((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILES:
        return getFiles();

      case IS_TIME_SERIES:
        return isIsTimeSeries();

      case TIME_INTERVAL:
        return getTimeInterval();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILES:
        return isSetFiles();
      case IS_TIME_SERIES:
        return isSetIsTimeSeries();
      case TIME_INTERVAL:
        return isSetTimeInterval();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readImageDatasetFromMultiFiles_args)
        return this.equals((readImageDatasetFromMultiFiles_args)that);
      return false;
    }

    public boolean equals(readImageDatasetFromMultiFiles_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_files = true && this.isSetFiles();
      boolean that_present_files = true && that.isSetFiles();
      if (this_present_files || that_present_files) {
        if (!(this_present_files && that_present_files))
          return false;
        if (!this.files.equals(that.files))
          return false;
      }

      boolean this_present_isTimeSeries = true;
      boolean that_present_isTimeSeries = true;
      if (this_present_isTimeSeries || that_present_isTimeSeries) {
        if (!(this_present_isTimeSeries && that_present_isTimeSeries))
          return false;
        if (this.isTimeSeries != that.isTimeSeries)
          return false;
      }

      boolean this_present_timeInterval = true;
      boolean that_present_timeInterval = true;
      if (this_present_timeInterval || that_present_timeInterval) {
        if (!(this_present_timeInterval && that_present_timeInterval))
          return false;
        if (this.timeInterval != that.timeInterval)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFiles()) ? 131071 : 524287);
      if (isSetFiles())
        hashCode = hashCode * 8191 + files.hashCode();

      hashCode = hashCode * 8191 + ((isTimeSeries) ? 131071 : 524287);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeInterval);

      return hashCode;
    }

    @Override
    public int compareTo(readImageDatasetFromMultiFiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files, other.files);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIsTimeSeries()).compareTo(other.isSetIsTimeSeries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsTimeSeries()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTimeSeries, other.isTimeSeries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeInterval()).compareTo(other.isSetTimeInterval());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeInterval()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeInterval, other.timeInterval);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readImageDatasetFromMultiFiles_args(");
      boolean first = true;

      sb.append("files:");
      if (this.files == null) {
        sb.append("null");
      } else {
        sb.append(this.files);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isTimeSeries:");
      sb.append(this.isTimeSeries);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeInterval:");
      sb.append(this.timeInterval);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readImageDatasetFromMultiFiles_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDatasetFromMultiFiles_argsStandardScheme getScheme() {
        return new readImageDatasetFromMultiFiles_argsStandardScheme();
      }
    }

    private static class readImageDatasetFromMultiFiles_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readImageDatasetFromMultiFiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readImageDatasetFromMultiFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.files = new java.util.ArrayList<java.lang.String>(_list40.size);
                  java.lang.String _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readString();
                    struct.files.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setFilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_TIME_SERIES
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isTimeSeries = iprot.readBool();
                struct.setIsTimeSeriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_INTERVAL
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.timeInterval = iprot.readDouble();
                struct.setTimeIntervalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readImageDatasetFromMultiFiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.files != null) {
          oprot.writeFieldBegin(FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.files.size()));
            for (java.lang.String _iter43 : struct.files)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_TIME_SERIES_FIELD_DESC);
        oprot.writeBool(struct.isTimeSeries);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_INTERVAL_FIELD_DESC);
        oprot.writeDouble(struct.timeInterval);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readImageDatasetFromMultiFiles_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDatasetFromMultiFiles_argsTupleScheme getScheme() {
        return new readImageDatasetFromMultiFiles_argsTupleScheme();
      }
    }

    private static class readImageDatasetFromMultiFiles_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readImageDatasetFromMultiFiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readImageDatasetFromMultiFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFiles()) {
          optionals.set(0);
        }
        if (struct.isSetIsTimeSeries()) {
          optionals.set(1);
        }
        if (struct.isSetTimeInterval()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFiles()) {
          {
            oprot.writeI32(struct.files.size());
            for (java.lang.String _iter44 : struct.files)
            {
              oprot.writeString(_iter44);
            }
          }
        }
        if (struct.isSetIsTimeSeries()) {
          oprot.writeBool(struct.isTimeSeries);
        }
        if (struct.isSetTimeInterval()) {
          oprot.writeDouble(struct.timeInterval);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readImageDatasetFromMultiFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.files = new java.util.ArrayList<java.lang.String>(_list45.size);
            java.lang.String _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readString();
              struct.files.add(_elem46);
            }
          }
          struct.setFilesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isTimeSeries = iprot.readBool();
          struct.setIsTimeSeriesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeInterval = iprot.readDouble();
          struct.setTimeIntervalIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readImageDatasetFromMultiFiles_result implements org.apache.thrift.TBase<readImageDatasetFromMultiFiles_result, readImageDatasetFromMultiFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<readImageDatasetFromMultiFiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readImageDatasetFromMultiFiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IMAGE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("imageException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readImageDatasetFromMultiFiles_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readImageDatasetFromMultiFiles_resultTupleSchemeFactory();

    public ImageDataset success; // required
    public ThriftImageException imageException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IMAGE_EXCEPTION((short)1, "imageException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IMAGE_EXCEPTION
            return IMAGE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImageDataset.class)));
      tmpMap.put(_Fields.IMAGE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("imageException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftImageException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readImageDatasetFromMultiFiles_result.class, metaDataMap);
    }

    public readImageDatasetFromMultiFiles_result() {
    }

    public readImageDatasetFromMultiFiles_result(
      ImageDataset success,
      ThriftImageException imageException)
    {
      this();
      this.success = success;
      this.imageException = imageException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readImageDatasetFromMultiFiles_result(readImageDatasetFromMultiFiles_result other) {
      if (other.isSetSuccess()) {
        this.success = new ImageDataset(other.success);
      }
      if (other.isSetImageException()) {
        this.imageException = new ThriftImageException(other.imageException);
      }
    }

    public readImageDatasetFromMultiFiles_result deepCopy() {
      return new readImageDatasetFromMultiFiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.imageException = null;
    }

    public ImageDataset getSuccess() {
      return this.success;
    }

    public readImageDatasetFromMultiFiles_result setSuccess(ImageDataset success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftImageException getImageException() {
      return this.imageException;
    }

    public readImageDatasetFromMultiFiles_result setImageException(ThriftImageException imageException) {
      this.imageException = imageException;
      return this;
    }

    public void unsetImageException() {
      this.imageException = null;
    }

    /** Returns true if field imageException is set (has been assigned a value) and false otherwise */
    public boolean isSetImageException() {
      return this.imageException != null;
    }

    public void setImageExceptionIsSet(boolean value) {
      if (!value) {
        this.imageException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ImageDataset)value);
        }
        break;

      case IMAGE_EXCEPTION:
        if (value == null) {
          unsetImageException();
        } else {
          setImageException((ThriftImageException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IMAGE_EXCEPTION:
        return getImageException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IMAGE_EXCEPTION:
        return isSetImageException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readImageDatasetFromMultiFiles_result)
        return this.equals((readImageDatasetFromMultiFiles_result)that);
      return false;
    }

    public boolean equals(readImageDatasetFromMultiFiles_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_imageException = true && this.isSetImageException();
      boolean that_present_imageException = true && that.isSetImageException();
      if (this_present_imageException || that_present_imageException) {
        if (!(this_present_imageException && that_present_imageException))
          return false;
        if (!this.imageException.equals(that.imageException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetImageException()) ? 131071 : 524287);
      if (isSetImageException())
        hashCode = hashCode * 8191 + imageException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readImageDatasetFromMultiFiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetImageException()).compareTo(other.isSetImageException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageException, other.imageException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readImageDatasetFromMultiFiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageException:");
      if (this.imageException == null) {
        sb.append("null");
      } else {
        sb.append(this.imageException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readImageDatasetFromMultiFiles_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDatasetFromMultiFiles_resultStandardScheme getScheme() {
        return new readImageDatasetFromMultiFiles_resultStandardScheme();
      }
    }

    private static class readImageDatasetFromMultiFiles_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readImageDatasetFromMultiFiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readImageDatasetFromMultiFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ImageDataset();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IMAGE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.imageException = new ThriftImageException();
                struct.imageException.read(iprot);
                struct.setImageExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readImageDatasetFromMultiFiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.imageException != null) {
          oprot.writeFieldBegin(IMAGE_EXCEPTION_FIELD_DESC);
          struct.imageException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readImageDatasetFromMultiFiles_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readImageDatasetFromMultiFiles_resultTupleScheme getScheme() {
        return new readImageDatasetFromMultiFiles_resultTupleScheme();
      }
    }

    private static class readImageDatasetFromMultiFiles_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readImageDatasetFromMultiFiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readImageDatasetFromMultiFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetImageException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetImageException()) {
          struct.imageException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readImageDatasetFromMultiFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ImageDataset();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.imageException = new ThriftImageException();
          struct.imageException.read(iprot);
          struct.setImageExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
